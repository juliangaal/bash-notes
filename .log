# Logbook script
path=~/notes
backup_path=~/.notes_backup
all=$(ls ~/notes)
number=$(ls ~/notes | wc -l)
editor=vim
today=$(date "+%Y-%m-%d")

host=osmc
servers=("${host}@192.168.1.115")
locations=("/home/${host}/notes_backup/")

log() {
	if [ ! -d $path ]; then
		mkdir $path && cd $path
	fi

	if [ ! $1 ]; then
		file=${path}/${today}.md

		if [ ! -f $file ]; then
			echo "#" >> ${file}
			echo "### Log ${today}" >> ${file}
		fi
    	${editor} ${path}/${today}.md
	else
		if [[ $1 == *".md" ]]; then
			name=${1}
		else
			name=${1}.md
		fi

		file=${path}/${name}
		${editor} ${file}
	fi
}

log_remote_backup() {
	printf "Backing up to "
	for server in ${servers[*]}
	do
    	printf "%s, specifically\n" $server
		for location in ${locations[*]}
		do
			echo  "${server}:${location}"
			rsync -avuz ${backup_path}/ ${server}:${location}
		done
	done
}

log_sync() {
	printf "Syncing from "
	for server in ${servers[*]}
	do
    	printf "%s, specifically\n" $server
		for location in ${locations[*]}
		do
			echo  "${server}:${location}"
			flags="--xattrs --sparse"
			cmd="${flags} ${server}:${location} ${backup_path}/"
			echo $cmd
			rsync $cmd
			restic -r ${backup_path}/ restore latest --target $path
		done
	done
}

log_backup() {
	echo "Number of notes: $number"
	echo "$all"
	echo "Backing up locally"
	backup_client="restic"
	if [ -x "$(command -v ${backup_client})" ]; then
		if [ ! -d ${backup_path} ]; then
			restic init --repo ${backup_path}
		fi
		restic -r ${backup_path} backup ${backup_path}

		echo "Local backup done"
		read -p "Backup to remote location (y/n)? " choice
		case "$choice" in
		y|Y ) log_remote_backup;;
		n|N ) exit 1;;
		* ) exit 1;;
		esac
	else
		echo "Restic is not installed!"
		echo "See https://restic.readthedocs.io/en/latest/020_installation.html#from-source"
		echo "Terminating. Can't back up"
	fi
}

log_show_all() {
	echo "Number of notes: $number"
	echo "$all"
}

log_info() {
	echo "Number of notes: $number"

	unameOut="$(uname -s)"
	case "${unameOut}" in
    	Linux*)     machine=Linux;;
    	Darwin*)    machine=Mac;;
    	CYGWIN*)    machine=Cygwin;;
    	MINGW*)     machine=MinGw;;
    	*)          machine="UNKNOWN:${unameOut}"
	esac
	echo "System: ${machine}"
	echo "Date: ${today}"
}

